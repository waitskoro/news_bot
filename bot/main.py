import threading
import time
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from db.database import Database
from bot.parsers.interfax import Interfax
from bot.parsers.bloomberg import Bloomberg
from bot.parsers.komersant import Kommersant
from bot.handlers.config_parser import Config


def log_message(message):
    print(f"[LOG] {message}")

def log_error(error):
    print(f"[ERROR] {error}")

class Main:
    def __init__(self):
        self.__db_user_id = None
        self.parsers = {}
        self.__database = None
        self.__config = Config()
        self.__user_id = None
        self.__last_message_ids = {}

        self.__init_database()
        self.__init_sources()

        self.__bot = telebot.TeleBot(self.__config.get_token_config())

        self.__bot.message_handler(commands=['start'])(self.start_message)
        self.__bot.callback_query_handler(func=lambda call: True)(self.callback_handler)

        self.start_news_distribution()
        self.__bot.message_handler(commands=['news'])(self.send_latest_news)
        self.__bot.message_handler(content_types=['text'])(self.handle_text_message)

    def __init_database(self):
        self.__database = Database(self.__config.get_database_config())
        sources = [
            ('–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä', 'https://www.kommersant.ru/lenta/news?from=lenta_news'),
            ('–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å', 'https://www.interfax.ru/'),
            ('Bloomberg', 'https://www.bloomberg.com/latest?utm_campaign=latest')
        ]
        for name, url in sources:
            self.__database.add_source(name, url)

    def send_latest_news(self, message):
        try:
            user_id = message.chat.id
            subscriptions = self.__database.get_user_subscriptions(user_id)

            if not subscriptions:
                self.__bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫.")
                return

            source_ids = [sub.magazine_id for sub in subscriptions]
            latest_news = self.__database.get_latest_news_by_sources(source_ids)

            if not latest_news:
                self.__bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º.")
                return

            news_by_source = {}
            for news in latest_news:
                source = self.__database.get_source_by_id(news.magazine_id)
                if source.name not in news_by_source:
                    news_by_source[source.name] = []
                news_by_source[source.name].append(news)

            response = []
            for source, news_list in news_by_source.items():
                response.append(f"üì∞ *{source}*")
                for news in news_list:
                    domain = self.extract_domain(news.link)
                    short_link = f"[{domain}]({news.link})"
                    response.append(f"‚Ä¢ {news.title} {short_link}")
                response.append("")

            self.__bot.send_message(
                user_id,
                "\n".join(response),
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

    def __create_keyboard(self, keyboard_type='main'):
        if keyboard_type == 'main':
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            keyboard.add("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üö´ –°—Ç–æ–ø")
            return keyboard
        elif keyboard_type == 'subscriptions':
            subscriptions = self.__database.get_user_subscriptions(self.__user_id)
            subscribed_ids = {sub.magazine_id for sub in subscriptions}
            sources = self.__database.get_sources()
            buttons = []
            for source in sources:
                prefix = "‚úÖ " if source.id in subscribed_ids else ""
                buttons.append([InlineKeyboardButton(
                    text=f"{prefix}{source.name}",
                    callback_data=f"subscribe_{source.id}"
                )])
            return InlineKeyboardMarkup(buttons)

    def start_news_distribution(self):
        def distribution_loop():
            while True:
                try:
                    unsent_news = self.__database.get_unsent_news()
                    for news in unsent_news:
                        subscribers = self.__database.get_subscribers_by_source(news.magazine_id)
                        source = self.__database.get_source_by_id(news.magazine_id)
                        domain = self.extract_domain(news.link)

                        message = (
                            f"üö® *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç {source.name}!*\n"
                            f"{news.title}\n"
                            f"[{domain}]({news.link})"
                        )

                        for subscriber in subscribers:
                            user = self.__database.get_user_by_id(subscriber.user_id)
                            if user:
                                try:
                                    self.__bot.send_message(
                                        user.telegram_id,
                                        message,
                                        parse_mode='Markdown',
                                        disable_web_page_preview=True
                                    )
                                except Exception as e:
                                    log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")

                        self.__database.mark_news_as_sent(news.id)
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                time.sleep(60)

        threading.Thread(target=distribution_loop, daemon=True).start()

    @staticmethod
    def extract_domain(url):
        from urllib.parse import urlparse
        parsed = urlparse(url)
        domain = parsed.netloc.replace("www.", "")
        return domain

    def __init_parser(self, source_name, parser_class):
        source = self.__database.get_source(source_name)
        try:
            self.parsers[source_name] = parser_class(source.url, self.__database)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ {source_name}: {e}")

    def __init_sources(self):
        parsers = {
            'Bloomberg': Bloomberg,
            '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä': Kommersant,
            '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å': Interfax
        }

        init_threads = []
        for source_name, parser_class in parsers.items():
            thread = threading.Thread(target=self.__init_parser, args=(source_name, parser_class))
            init_threads.append(thread)
            thread.start()

        for thread in init_threads:
            thread.join()

        if not all(self.parsers.values()):
            raise RuntimeError("–û–¥–∏–Ω –∏–∑ –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        self.start_periodic_scraping()

    def start_periodic_scraping(self):
        def run_periodically(parser):
            while True:
                try:
                    parser.scraping()
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ {parser.__class__.__name__}: {e}")
                time.sleep(180)  # 3 –º–∏–Ω—É—Ç—ã

        scraping_threads = []
        for parser in self.parsers.values():
            thread = threading.Thread(target=run_periodically, args=(parser,), daemon=True)
            scraping_threads.append(thread)
            thread.start()

        print("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    def start_message(self, message):
        self.__user_id = message.chat.id
        self.__database.add_user(message.chat.id, message.chat.username)

        self.delete_last_message(self.__user_id)

        sent_message = self.__bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫(–∏) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏:",
            reply_markup=self.__create_keyboard('subscriptions')
        )

        self.__last_message_ids[self.__user_id] = sent_message.message_id

    def handle_text_message(self, message):
        text = message.text.strip().lower()
        log_message(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        if text == "üì∞ –Ω–æ–≤–æ—Å—Ç–∏":
            self.send_latest_news(message)
        elif text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.show_settings(message)
        elif text == "üö´ —Å—Ç–æ–ø":
            self.stop_subscriptions(message)
        else:
            self.__bot.send_message(
                message.chat.id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=self.__create_keyboard('main')
            )

    def show_settings(self, message):
        try:
            self.__user_id = message.chat.id
            log_message(f"–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.__user_id}")

            self.delete_last_message(self.__user_id)

            sent_message = self.__bot.send_message(
                message.chat.id,
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:",
                reply_markup=self.__create_keyboard('subscriptions')
            )

            self.__last_message_ids[self.__user_id] = sent_message.message_id

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")
            self.__bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup=self.__create_keyboard('main')
            )

    def stop_subscriptions(self, message):
        user_id = message.chat.id
        log_message(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        try:
            success = self.__database.remove_all_subscriptions(user_id)
            if success:
                self.__bot.send_message(
                    user_id,
                    "‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.",
                    reply_markup=self.__create_keyboard('main')
                )
            else:
                self.__bot.send_message(
                    user_id,
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                    reply_markup=self.__create_keyboard('main')
                )
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
            self.__bot.send_message(
                user_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–æ–∫",
                reply_markup=self.__create_keyboard('main')
            )

    def callback_handler(self, call):
        data = call.data
        user_id = call.from_user.id

        if data.startswith("subscribe_"):
            magazine_id = int(data.split("_")[1])
            try:
                result = self.__database.add_subscription(user_id, magazine_id)
                new_keyboard = self.__create_keyboard('subscriptions')
                self.__bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=new_keyboard
                )
                self.__bot.answer_callback_query(
                    call.id,
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' if result == 'added' else '–æ—Ç–º–µ–Ω–µ–Ω–∞'}",
                    show_alert=False
                )
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞: {e}")
                self.__bot.answer_callback_query(
                    call.id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                    show_alert=True
                )

    def delete_last_message(self, user_id):
        if user_id in self.__last_message_ids:
            try:
                self.__bot.delete_message(
                    chat_id=user_id,
                    message_id=self.__last_message_ids[user_id]
                )
            except telebot.apihelper.ApiException as e:
                log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def run(self):
        self.__bot.infinity_polling()


if __name__ == '__main__':
    main = Main()
    main.run()